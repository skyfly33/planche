Ext.define('Planche.engine.MySQL', function(){

	var queries = {
		SELECT_USER : 'SELECT * FROM `mysql`.`user`',
		SHOW_FULL_FIELDS : 'SHOW FULL FIELDS FROM `{0}`.`{1}`',
		SHOW_ADVANCED_PROPERTIES : 'SHOW TABLE STATUS FROM `{0}` LIKE "{1}"',
		SHOW_DATABASE : 'show databases',
		OPEN_TABLE : 'SELECT * FROM `{0}`.`{1}`',
		SHOW_PROCEDURES : 'SHOW PROCEDURE STATUS WHERE DB = "{0}"',
		SHOW_FUNCTIONS : 'SHOW FUNCTION STATUS WHERE DB = "{0}"',
		SHOW_TRIGGERS : 'SHOW TRIGGERS FROM `{0}`',
		SHOW_EVENTS : 'SELECT `Event_name`,`Definer`,`Event_type`,`Execute_at`,`Interval_value`,`Interval_field`,`Starts`,`Ends`,`Status` FROM `INFORMATION_SCHEMA`.`EVENTS` WHERE `EVENT_SCHEMA` = "{0}"',
		SHOW_VIEWS : 'SELECT `TABLE_NAME` AS View_name,`View_definition`,`Check_option`,`Is_updatable`,`Definer`,`Security_type` FROM `INFORMATION_SCHEMA`.`VIEWS` WHERE `TABLE_SCHEMA` = "{0}"',
		SHOW_DATABASE_DDL : 'SHOW CREATE DATABASE `{0}`',
		SHOW_TABLE_STATUS : 'SHOW TABLE STATUS FROM `{0}` WHERE ENGINE IS NOT NULL',
		CHANGE_TABLE_TYPE : 'ALTER TABLE `{0}`.`{1}` ENGINE = {2}',
		INSERT_TABLE : 'INSERT INTO `{0}`.`{1}` ({2}) VALUES({3});',		
		UPDATE_TABLE : 'UPDATE `{0}`.`{1}` SET {2} WHERE {3};',
		DELETE_TABLE : 'DELETE FROM `{0}`.`{1}` WHERE {2};',
		SELECT_TABLE : 'SELECT {2} FROM `{0}`.`{1}`;',
		TABLE_CREATE_INFO	: 'SHOW CREATE TABLE `{0}`.`{1}`',
		TABLE_FIELDS_INFO	: 'SHOW FULL FIELDS FROM `{0}`.`{1}`',
		TABLE_KEYS_INFO	: 'SHOW KEYS FROM `{0}`.`{1}`',
		CREATE_PROCEDURE : 'DELIMITER $$ CREATE /*[DEFINER = { user | CURRENT_USER }]*/ PROCEDURE `{0}`.`{1}`() /*LANGUAGE SQL | [NOT] DETERMINISTIC | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } | SQL SECURITY { DEFINER | INVOKER } | COMMENT \'string\'*/ BEGIN END$$ DELIMITER ;',
		CREATE_FUNCTION : 'DELIMITER $$ CREATE /*[DEFINER = { user | CURRENT_USER }]*/ FUNCTION `{0}`.`{1}`() RETURNS TYPE /*LANGUAGE SQL | [NOT] DETERMINISTIC | { CONTAINS SQL | NO SQL | READS SQL DATA | MODIFIES SQL DATA } | SQL SECURITY { DEFINER | INVOKER } | COMMENT \'string\'*/ BEGIN END$$ DELIMITER ;',
		CREATE_TRIGGER : 'DELIMITER $$ CREATE /*[DEFINER = { user | CURRENT_USER }]*/ TRIGGER `{0}`.`{1}` BEFORE/AFTER INSERT/UPDATE/DELETE ON `{0}`.`<Table Name>` FOR EACH ROW BEGIN END$$ DELIMITER ;',
		CREATE_EVENT : 'DELIMITER $$ -- SET GLOBAL event_scheduler = ON$$\n-- required for event to execute but not create\nCREATE /*[DEFINER = { user | CURRENT_USER }]*/	EVENT `{0}`.`{1}` ON SCHEDULE /* uncomment the example below you want to use */\n-- scheduleexample 1: run once\n \t--  AT \'YYYY-MM-DD HH:MM.SS\'/CURRENT_TIMESTAMP { + INTERVAL 1 [HOUR|MONTH|WEEK|DAY|MINUTE|...] }\n -- scheduleexample 2: run at intervals forever after creation\n \t-- EVERY 1 [HOUR|MONTH|WEEK|DAY|MINUTE|...]\n -- scheduleexample 3: specified start time, end time and interval for execution\n /*EVERY 1  [HOUR|MONTH|WEEK|DAY|MINUTE|...]\n STARTS CURRENT_TIMESTAMP/\'YYYY-MM-DD HH:MM.SS\' { + INTERVAL 1[HOUR|MONTH|WEEK|DAY|MINUTE|...] }\n ENDS CURRENT_TIMESTAMP/\'YYYY-MM-DD HH:MM.SS\' { + INTERVAL 1 [HOUR|MONTH|WEEK|DAY|MINUTE|...] } */ /*[ON COMPLETION [NOT] PRESERVE] [ENABLE | DISABLE] [COMMENT \'comment\']*/ DO BEGIN (sql_statements) END$$ DELIMITER ;',
		CREATE_VIEW : 'CREATE /*[ALGORITHM = {UNDEFINED | MERGE | TEMPTABLE}] [DEFINER = { user | CURRENT_USER }] [SQL SECURITY { DEFINER | INVOKER }]*/ VIEW `{0}`.`{1}` AS (SELECT * FROM ...);',
		SHOW_CREATE_PROCEDURE : 'SHOW CREATE PROCEDURE `{0}`.`{1}`',
		SHOW_CREATE_TABLE : 'SHOW CREATE TABLE `{0}`.`{1}`',
		SHOW_CREATE_VIEW : 'SHOW CREATE TABLE `{0}`.`{1}`',
		SHOW_CREATE_FUNCTION : 'SHOW CREATE FUNCTION `{0}`.`{1}`',
		SHOW_CREATE_TRIGGER : 'SHOW CREATE TRIGGER `{0}`.`{1}`',
		SHOW_CREATE_EVENT : 'SHOW CREATE EVENT `{0}`.`{1}`',
		ALTER_VIEW : 'DELIMITER $$ USE `{0}`$$ DROP VIEW IF EXISTS `{1}`$$ {2}$$ DELIMITER;',
		ALTER_PROCEDURE : 'DELIMITER $$ USE `{0}`$$ DROP PROCEDURE IF EXISTS `{1}`$$ {2}$$ DELIMITER;',
		ALTER_FUNCTION : 'DELIMITER $$ USE `{0}`$$ DROP FUNCTION IF EXISTS `{1}`$$ {2}$$ DELIMITER;',
		ALTER_TRIGGER : 'DELIMITER $$ USE `{0}`$$ DROP TRIGGER IF EXISTS `{1}`$$ {2}$$ DELIMITER;',
		ALTER_EVENT : 'DELIMITER $$ USE `{0}`$$ DROP EVENT IF EXISTS `{1}`$$ {2}$$ DELIMITER;',
		SHOW_PROCESS_LIST : 'SHOW FULL PROCESSLIST',
		SHOW_VARIABLES : 'SHOW VARIABLES',
		SHOW_STATUS : 'SHOW STATUS',
		SHOW_GLOBAL_STATUS : 'SHOW GLOBAL STATUS',
		SHOW_SESSION_STATUS : 'SHOW SESSION STATUS'
	};

	var joins			= ['NATURAL JOIN', 'INNER JOIN', 'LFET INNER JOIN', 'RIGHT INNER JOIN', 'LEFT OUTER JOIN', 'LEFT JOIN', 'RIGHT OUTER JOIN', 'RIGHT JOIN', 'CROSS JOIN', 'JOIN'];
	var functions		= ['ABS', 'ACOS', 'ADDDATE', 'ADDTIME', 'AES_DECRYPT', 'AES_ENCRYPT', 'AREA', 'ASBINARY', 'ASWKB', 'ASCII', 'ASIN', 'ASTEXT', 'ASWKT', 'ATAN2', 'ATAN', 'ATAN', 'AVG', 'BDMPOLYFROMTEXT', 'BDMPOLYFROMWKB', 'BDPOLYFROMTEXT', 'BDPOLYFROMWKB', 'BENCHMARK', 'BIN', 'BINARY', 'BIT_AND', 'BIT_COUNT', 'BIT_LENGTH', 'BIT_OR', 'BIT_XOR', 'BOUNDARY', 'BUFFER', 'CAST', 'CEIL', 'CEILING', 'CHAR_LENGTH', 'CHAR', 'CHARACTER_LENGTH', 'CHARSET', 'COALESCE', 'COERCIBILITY', 'COLLATION', 'COMPRESS', 'CONCAT_WS', 'CONCAT', 'CONNECTION_ID', 'CONTAINS', 'CONV', 'CONVERT_TZ', 'CONVERT', 'COS', 'COT', 'COUNT', 'CRC32', 'CROSSES', 'CURDATE', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURRENT_USER', 'CURRENT_USER', 'CURTIME', 'DATABASE', 'DATE_ADD', 'DATE_FORMAT', 'DATE_SUB', 'DATE', 'DATEDIFF', 'DAY', 'DAYNAME', 'DAYOFMONTH', 'DAYOFWEEK', 'DAYOFYEAR', 'DECODE', 'DEFAULT', 'DEGREES', 'DES_DECRYPT', 'DES_ENCRYPT', 'DIMENSION', 'DISJOINT', 'DIV', 'ELT', 'ENCODE', 'ENCRYPT', 'ENDPOINT', 'ENVELOPE', 'EQUALS', 'EXP', 'EXPORT_SET', 'EXTERIORRING', 'EXTRACT', 'EXTRACTVALUE', 'FIELD', 'FIND_IN_SET', 'FLOOR', 'FORMAT', 'FOUND_ROWS', 'FROM_BASE64', 'FROM_DAYS', 'FROM_UNIXTIME', 'GEOMCOLLFROMTEXT', 'GEOMETRYCOLLECTIONFROMTEXT', 'GEOMCOLLFROMWKB', 'GEOMETRYCOLLECTIONFROMWKB', 'GEOMETRYCOLLECTION', 'GEOMETRYN', 'GEOMETRYTYPE', 'GEOMFROMTEXT', 'GEOMETRYFROMTEXT', 'GEOMFROMWKB', 'GET_FORMAT', 'GET_LOCK', 'GLENGTH', 'GREATEST', 'GROUP_CONCAT', 'GTID_SUBSET', 'GTID_SUBTRACT', 'HEX', 'HOUR', 'IF', 'IFNULL', 'IN', 'INET_ATON', 'INET_NTOA', 'INET6_ATON', 'INET6_NTOA', 'INSERT', 'INSTR', 'INTERIORRINGN', 'INTERSECTS', 'INTERVAL', 'IS_FREE_LOCK', 'IS_IPV4_COMPAT', 'IS_IPV4_MAPPED', 'IS_IPV4', 'IS_IPV6', 'IS_USED_LOCK', 'ISCLOSED', 'ISEMPTY', 'ISNULL', 'ISSIMPLE', 'LAST_DAY', 'LAST_INSERT_ID', 'LCASE', 'LEAST', 'LEFT', 'LENGTH', 'LINEFROMTEXT', 'LINEFROMWKB', 'LINESTRINGFROMWKB', 'LINESTRING', 'LN', 'LOAD_FILE', 'LOCALTIME', 'LOCALTIME', 'LOCALTIMESTAMP', 'LOCALTIMESTAMP', 'LOCATE', 'LOG10', 'LOG2', 'LOG', 'LOWER', 'LPAD', 'LTRIM', 'MAKE_SET', 'MAKEDATE', 'MAKETIME', 'MASTER_POS_WAIT', 'MAX', 'MBRCONTAINS', 'MBRDISJOINT', 'MBREQUAL', 'MBRINTERSECTS', 'MBROVERLAPS', 'MBRTOUCHES', 'MBRWITHIN', 'MD5', 'MICROSECOND', 'MID', 'MIN', 'MINUTE', 'MLINEFROMTEXT', 'MULTILINESTRINGFROMTEXT', 'MLINEFROMWKB', 'MULTILINESTRINGFROMWKB', 'MOD', 'MONTH', 'MONTHNAME', 'MPOINTFROMTEXT', 'MULTIPOINTFROMTEXT', 'MPOINTFROMWKB', 'MULTIPOINTFROMWKB', 'MPOLYFROMTEXT', 'MULTIPOLYGONFROMTEXT', 'MPOLYFROMWKB', 'MULTIPOLYGONFROMWKB', 'MULTILINESTRING', 'MULTIPOINT', 'MULTIPOLYGON', 'NAME_CONST', 'NOT', 'IN', 'NOW', 'NULLIF', 'NUMGEOMETRIES', 'NUMINTERIORRINGS', 'NUMPOINTS', 'OCT', 'OCTET_LENGTH', 'OLD_PASSWORD', 'ORD', 'OVERLAPS', 'PASSWORD', 'PERIOD_ADD', 'PERIOD_DIFF', 'PI', 'POINT', 'POINTFROMTEXT', 'POINTFROMWKB', 'POINTN', 'POLYFROMTEXT', 'POLYGONFROMTEXT', 'POLYFROMWKB', 'POLYGONFROMWKB', 'POLYGON', 'POSITION', 'POW', 'POWER', 'PROCEDURE', 'ANALYSE', 'QUARTER', 'QUOTE', 'RADIANS', 'RAND', 'RANDOM_BYTES', 'REGEXP', 'RELEASE_LOCK', 'REPEAT', 'REPLACE', 'REVERSE', 'RIGHT', 'RLIKE', 'ROUND', 'ROW_COUNT', 'RPAD', 'RTRIM', 'SCHEMA', 'SEC_TO_TIME', 'SECOND', 'SESSION_USER', 'SHA1', 'SHA', 'SHA2', 'SIGN', 'SIN', 'SLEEP', 'SOUNDEX', 'SPACE', 'SQRT', 'SRID', 'ST_CONTAINS', 'ST_CROSSES', 'ST_DISJOINT', 'ST_EQUALS', 'ST_INTERSECTS', 'ST_OVERLAPS', 'ST_TOUCHES', 'ST_WITHIN', 'STARTPOINT', 'STD', 'STDDEV_POP', 'STDDEV_SAMP', 'STDDEV', 'STR_TO_DATE', 'STRCMP', 'SUBDATE', 'SUBSTR', 'SUBSTRING_INDEX', 'SUBSTRING', 'SUBTIME', 'SUM', 'SYSDATE', 'SYSTEM_USER', 'TAN', 'TIME_FORMAT', 'TIME_TO_SEC', 'TIME', 'TIMEDIFF', 'TIMESTAMP', 'TIMESTAMPADD', 'TIMESTAMPDIFF', 'TO_BASE64', 'TO_DAYS', 'TO_SECONDS', 'TOUCHES', 'TRIM', 'TRUNCATE', 'UCASE', 'UNCOMPRESS', 'UNCOMPRESSED_LENGTH', 'UNHEX', 'UNIX_TIMESTAMP', 'UPDATEXML', 'UPPER', 'USER', 'UTC_DATE', 'UTC_TIME', 'UTC_TIMESTAMP', 'UUID_SHORT', 'UUID', 'VALIDATE_PASSWORD_STRENGTH', 'VALUES', 'VAR_POP', 'VAR_SAMP', 'VARIANCE', 'VERSION', 'WAIT_UNTIL_SQL_THREAD_AFTER_GTIDS', 'WEEK', 'WEEKDAY', 'WEEKOFYEAR', 'WEIGHT_STRING', 'WITHIN', 'X', 'Y', 'YEAR', 'YEARWEEK'];
	var reserved_words	= ['ACCESSIBLE', 'ADD', 'ALL', 'ALTER', 'ANALYZE', 'AND', 'AS', 'ASC', 'ASENSITIVE', 'BEFORE', 'BETWEEN', 'BIGINT', 'BINARY', 'BLOB', 'BOTH', 'BY', 'CALL', 'CASCADE', 'CASE', 'CHANGE', 'CHAR', 'CHARACTER', 'CHECK', 'COLLATE', 'COLUMN', 'CONDITION', 'CONSTRAINT', 'CONTINUE', 'CONVERT', 'CREATE', 'CROSS', 'CURRENT_DATE', 'CURRENT_TIME', 'CURRENT_TIMESTAMP', 'CURRENT_USER', 'CURSOR', 'DATABASE', 'DATABASES', 'DAY_HOUR', 'DAY_MICROSECOND', 'DAY_MINUTE', 'DAY_SECOND', 'DEC', 'DECIMAL', 'DECLARE', 'DEFAULT', 'DELAYED', 'DELETE', 'DESC', 'DESCRIBE', 'DETERMINISTIC', 'DISTINCT', 'DISTINCTROW', 'DIV', 'DOUBLE', 'DROP', 'DUAL', 'EACH', 'ELSE', 'ELSEIF', 'ENCLOSED', 'ESCAPED', 'EXISTS', 'EXIT', 'EXPLAIN', 'FALSE', 'FETCH', 'FLOAT', 'FLOAT4', 'FLOAT8', 'FOR', 'FORCE', 'FOREIGN', 'FROM', 'FULLTEXT', 'GET', 'GRANT', 'GROUP', 'HAVING', 'HIGH_PRIORITY', 'HOUR_MICROSECOND', 'HOUR_MINUTE', 'HOUR_SECOND', 'IF', 'IGNORE', 'IN', 'INDEX', 'INFILE', 'INNER', 'INOUT', 'INSENSITIVE', 'INSERT', 'INT', 'INT1', 'INT2', 'INT3', 'INT4', 'INT8', 'INTEGER', 'INTERVAL', 'INTO', 'IO_AFTER_GTIDS', 'IO_BEFORE_GTIDS', 'IS', 'ITERATE', 'JOIN', 'KEY', 'KEYS', 'KILL', 'LEADING', 'LEAVE', 'LEFT', 'LIKE', 'LIMIT', 'LINEAR', 'LINES', 'LOAD', 'LOCALTIME', 'LOCALTIMESTAMP', 'LOCK', 'LONG', 'LONGBLOB', 'LONGTEXT', 'LOOP', 'LOW_PRIORITY', 'MASTER_BIND', 'MASTER_SSL_VERIFY_SERVER_CERT', 'MATCH', 'MAXVALUE', 'MEDIUMBLOB', 'MEDIUMINT', 'MEDIUMTEXT', 'MIDDLEINT', 'MINUTE_MICROSECOND', 'MINUTE_SECOND', 'MOD', 'MODIFIES', 'NATURAL', 'NOT', 'NO_WRITE_TO_BINLOG', 'NULL', 'NUMERIC', 'ON', 'OPTIMIZE', 'OPTION', 'OPTIONALLY', 'OR', 'ORDER', 'OUT', 'OUTER', 'OUTFILE', 'PARTITION', 'PRECISION', 'PRIMARY', 'PROCEDURE', 'PURGE', 'RANGE', 'READ', 'READS', 'READ_WRITE', 'REAL', 'REFERENCES', 'REGEXP', 'RELEASE', 'RENAME', 'REPEAT', 'REPLACE', 'REQUIRE', 'RESIGNAL', 'RESTRICT', 'RETURN', 'REVOKE', 'RIGHT', 'RLIKE', 'SCHEMA', 'SCHEMAS', 'SECOND_MICROSECOND', 'SELECT', 'SENSITIVE', 'SEPARATOR', 'SET', 'SHOW', 'SIGNAL', 'SMALLINT', 'SPATIAL', 'SPECIFIC', 'SQL', 'SQLEXCEPTION', 'SQLSTATE', 'SQLWARNING', 'SQL_BIG_RESULT', 'SQL_CALC_FOUND_ROWS', 'SQL_SMALL_RESULT', 'SSL', 'STARTING', 'STRAIGHT_JOIN', 'TABLE', 'TERMINATED', 'THEN', 'TINYBLOB', 'TINYINT', 'TINYTEXT', 'TO', 'TRAILING', 'TRIGGER', 'TRUE', 'UNDO', 'UNION', 'UNIQUE', 'UNLOCK', 'UNSIGNED', 'UPDATE', 'USAGE', 'USE', 'USING', 'UTC_DATE', 'UTC_TIME', 'UTC_TIMESTAMP', 'VALUES', 'VARBINARY', 'VARCHAR', 'VARCHARACTER', 'VARYING', 'WHEN', 'WHERE', 'WHILE', 'WITH', 'WRITE', 'XOR', 'YEAR_MONTH', 'ZEROFILL'];
	var data_types		= ['tinyint', 'int', 'varchar', 'float', 'double', 'timestamp', 'bit', 'bigint', 'mediumint', 'date', 'time', 'datetime', 'year', 'date', 'enum', 'set', 'tinyblob', 'mediumblob', 'longblob', 'blob', 'varchar', 'char', 'geometr'];
	
	var regexpLimit		= "LIMIT\\s+[0-9]+((\\s+?,|,)?(\\s+)?[0-9]+)";
	
	return {
		singleton: true,
		constructor: function(config) {

			this.callParent(arguments);
		},
		getQuery : function(query){
			
			var args = Ext.Array.slice(arguments, 1);
			args.unshift(queries[query]);
			return Ext.String.format.apply(this, args);
		},
		getDataTypes : function(){

			return data_types;
		},
		getDataTypesToJSON : function(){

			var json = [];
			Ext.Array.each(data_types, function(type, idx){

				json.push([type, type]);
			})

			return json;
		},
		getFunctions : function(){

			return functions;
		},

		getReservedWords : function(){

			return reserved_words;
		},

		getJoins : function(){

			return joins;
		},

		getRegexpLimit : function(){

			return regexpLimit;
		}
	}
});